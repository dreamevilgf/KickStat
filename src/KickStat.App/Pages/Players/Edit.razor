@page "/players/edit/{id:int?}"
@using KickStat.Models.Players
@attribute [Authorize]
@inject KickStatPlayersApiClient PlayersApiClient
@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime

@if (IsLoading)
{
    <Progress/>
}
else
{
    <MudCard Class="mt-8  kickstat-card" Elevation="0">
        <EditForm Model="@EditingItem" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator/>
            <MudCardContent>
                <MudGrid Justify="Justify.Center">

                    <MudItem xs="12" md="6">
                        <div class="kickstat-label">ФИО</div>
                        <MudTextField @bind-Value="EditingItem.FullName" For="() => EditingItem.FullName" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <div class="kickstat-label">Год рождения</div>
                        <MudTextField @bind-Value="EditingItem.BirthYear" For="() => EditingItem.BirthYear" InputType="InputType.Number" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                    </MudItem>

                    <MudItem xs="12">
                        <div class="kickstat-label">Описание</div>
                        <MudTextField @bind-Value="EditingItem.Description" For="() => EditingItem.Description" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
            
            @if (Errors.Any())
            {
                <MudCardContent>
                    @foreach (var error in Errors)
                    {
                        <MudText Color="@Color.Error">
                            @error
                        </MudText>
                    }
                </MudCardContent>
            }
            
            <MudCardActions>
                <MudHidden Breakpoint="Breakpoint.SmAndDown">
                    <MudSpacer/>
                    <MudButton OnClick="GoBack" Color="Color.Secondary" Class="kickstat-btn" Variant="Variant.Filled" DisableElevation="true">Отменить</MudButton>
                    <MudButton ButtonType="ButtonType.Submit" Disabled="@(IsSaving || IsLoading)" Class="kickstat-btn ml-2" Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true">
                        @if (IsSaving)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                        }
                        else
                        {
                            <MudText>Сохранить</MudText>
                        }
                    </MudButton>
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.MdAndUp">
                        <MudButton ButtonType="ButtonType.Submit" Disabled="@(IsSaving || IsLoading)" FullWidth="true" Class="kickstat-btn  mt-4" Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true">
                            @if (IsSaving)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                            }
                            else
                            {
                                <MudText>Сохранить</MudText>
                            }
                        </MudButton>
                </MudHidden>
            </MudCardActions>
        </EditForm>
    </MudCard>
}


@code {

    [Parameter]
    public int? Id { get; set; }

    private bool IsLoading;

    private bool IsSaving;

    private PlayerModel EditingItem = new();
    List<string?> Errors = new();

    protected override async Task OnInitializedAsync()
    {
        if (Id is null or <= 0)
            return;

        try
        {
            IsLoading = true;
            EditingItem = await PlayersApiClient.Get(Id.Value);
        }
        catch (Exception e)
        {
            Errors.Add(e.Data.Contains("error") ? e.Data["error"] as string : "Произошла ошибка, попробуйте позже");
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task OnValidSubmit()
    {
        try
        {
            IsSaving = true;
            EditingItem = await PlayersApiClient.Save(EditingItem);
            NavigationManager.NavigateTo("/players");
        }
        catch (Exception e)
        {
            Errors.Add(e.Data.Contains("error") ? e.Data["error"] as string : "Произошла ошибка, попробуйте позже");
        }
        finally
        {
            IsSaving = false;
        }
    }

    private async Task GoBack()
    {
        await JsRuntime.InvokeVoidAsync("history.back");
    }


}