@page "/games/edit/{id:int?}"
@using KickStat.Models.Games;
@using KickStat.Models.Players;
@using KickStat.Models.GameEvents
@attribute [Authorize]
@inject KickStatGamesApiClient GameApiClient;
@inject NavigationManager NavigationManager;
@inject KickStatPlayersApiClient PlayersApiClient
@inject IJSRuntime JsRuntime

@if (IsLoading)
{
    <Progress/>
}
else
{
    <EditForm Model="@EditingItem" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator/>
        <MudCard Class="mt-8 kickstat-card" Elevation="0">

            <MudCardContent>

                <MudGrid Spacing="1" Justify="Justify.Center">

                    <MudItem xs="12" md="6">
                        <div class="kickstat-label">Игрок</div>
                        <MudSelect @bind-Value="EditingItem.PlayerId" T="int?" For="() => EditingItem.PlayerId" Variant="Variant.Outlined" Placeholder="Выберите игрока" Margin="Margin.Dense">
                            @foreach (var player in Players)
                            {
                                <MudSelectItem T="int?" Value="@player.Id">@player.FullName</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <div class="kickstat-label">Соперник</div>
                        <MudTextField @bind-Value="EditingItem.OpposingTeam" For="() => EditingItem.OpposingTeam" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                    </MudItem>

                    <MudItem xs="6">
                        <div class="kickstat-label">Дата</div>
                        <MudTextField @bind-Value="EditingItem.Date" T="DateTime?" Format="yyyy-MM-dd" For="() => EditingItem.Date" Variant="Variant.Outlined" InputType="InputType.Date" Margin="Margin.Dense"/>
                    </MudItem>
                    <MudItem xs="6">
                        <div class="kickstat-label">Длительность матча</div>
                        <MudTextField @bind-Value="EditingItem.MatchDuration" For="() => EditingItem.MatchDuration" Variant="Variant.Outlined" InputType="InputType.Number" Margin="Margin.Dense"/>
                    </MudItem>
                    <MudItem xs="12">
                        <div class="kickstat-label">Соревнование</div>
                        <MudTextField @bind-Value="EditingItem.Competition" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                    </MudItem>
                </MudGrid>
            </MudCardContent>


        </MudCard>


        @if (EditingItem.Events.Any())
        {
            <MudGrid Class="mt-4">

                @foreach (var itemEvent in EditingItem.Events)
                {
                    <MudItem xs="12" sm="12" md="4">
                        <MudCard Class="kickstat-card" Elevation="0">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h2">@itemEvent.Key</MudText>
                                    <MudGrid >
                                        @foreach (var e in itemEvent.Value)
                                        {
                                            <MudItem xs="(e.HasNegative ? 6 : 12)">
                                                <MudText Typo="Typo.body1">@e.LabelPositive</MudText>
                                                <div class="d-flex">

                                                    <MudIconButton Icon="@Icons.Material.Filled.Remove" Variant="Variant.Text" Color="Color.Success" Size="Size.Medium" @onclick="() => Decrease(e, true)"/>
                                                    <MudText Class="pt-3" Typo="Typo.subtitle1" Style="width: 100%; text-align: center;">@(e.PositiveValue.HasValue ? e.PositiveValue.Value : "Нет")</MudText>
                                                    <MudIconButton @onclick="() => Increase(e, true)" Icon="@Icons.Material.Filled.Add" Variant="Variant.Text" Color="Color.Success" Size="Size.Medium"/>
                                                </div>

                                            </MudItem>
                                            if (e.HasNegative)
                                            {
                                                <MudItem xs="6">
                                                    <MudText Typo="Typo.body1">@e.LabelNegative</MudText>
                                                    <div class="d-flex">

                                                        <MudIconButton Icon="@Icons.Material.Filled.Remove" Variant="Variant.Text" Color="Color.Error" Size="Size.Medium"
                                                                       @onclick="() => Decrease(e, false)"/>
                                                        <MudText Class="pt-3" Typo="Typo.subtitle1" Style="width: 100%; text-align: center;">@(e.NegativeValue.HasValue ? e.NegativeValue.Value : "Нет")</MudText>
                                                        <MudIconButton @onclick="() => Increase(e, false)" Icon="@Icons.Material.Filled.Add" Variant="Variant.Text" Color="Color.Error" Size="Size.Medium"/>
                                                    </div>
                                                </MudItem>
                                            }
                                        }
                                    </MudGrid>
                                </CardHeaderContent>
                            </MudCardHeader>
                        </MudCard>
                    </MudItem>
                }


            </MudGrid>
        }

        <MudCard Class="kickstat-card" Elevation="0">
            @if (errors.Any())
            {
                <MudCardContent>
                    @foreach (var error in errors)
                    {
                        <MudText Color="@Color.Error">
                            @error
                        </MudText>
                    }
                </MudCardContent>
            }
            <MudCardActions>
                <MudHidden Breakpoint="Breakpoint.SmAndDown">
                    <MudSpacer/>
                    <MudButton OnClick="GoBack" Color="Color.Secondary" Class="kickstat-btn" Variant="Variant.Filled" DisableElevation="true">Отменить</MudButton>
                    <MudButton ButtonType="ButtonType.Submit" Disabled="@(IsSaving || IsLoading)" Class="kickstat-btn ml-2" Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true">
                        @if (IsSaving)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                        }
                        else
                        {
                            <MudText>Сохранить</MudText>
                        }
                    </MudButton>
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.MdAndUp">

                        <MudButton ButtonType="ButtonType.Submit" Disabled="@(IsSaving || IsLoading)" FullWidth="true" Class="kickstat-btn  mt-4" Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true">
                            @if (IsSaving)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                            }
                            else
                            {
                                <MudText>Сохранить</MudText>
                            }
                        </MudButton>
                </MudHidden>
            </MudCardActions>
        </MudCard>
    </EditForm>
}


@code {

    [Parameter]
    public int? Id { get; set; }

    private bool IsLoading;

    private bool IsSaving;

    private GameEditModel EditingItem = new();
    private List<PlayerModel> Players = new();
    List<string?> errors = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            IsLoading = true;
            var response = await PlayersApiClient.List(
                new PlayerListRequest
                {
                    Sort = new PlayerSortModel {IsAscending = true, OrderBy = PlayerSortOptions.FullName},
                    Filter = new PlayerFilterModel {Take = 100}
                });

            Players = response.Result?.ToList() ?? new List<PlayerModel>();

            IsLoading = true;
            EditingItem = await GameApiClient.Get(Id ?? 0);
        }
        catch (Exception e)
        {
            errors.Add(e.Data.Contains("error") ? e.Data["error"] as string : "Произошла ошибка, попробуйте позже");
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void Increase(GameEventModel e, bool isPositive)
    {
        if (isPositive)
        {
            if (!e.PositiveValue.HasValue)
                e.PositiveValue = 1;
            else
                e.PositiveValue += 1;
        }
        else
        {
            if (!e.NegativeValue.HasValue)
                e.NegativeValue = 1;
            else
                e.NegativeValue += 1;
        }
    }

    private void Decrease(GameEventModel e, bool isPositive)
    {
        if (isPositive)
        {
            if (!e.PositiveValue.HasValue || e.PositiveValue == 1)
                e.PositiveValue = null;
            else
                e.PositiveValue -= 1;
        }
        else
        {
            if (!e.NegativeValue.HasValue || e.NegativeValue == 1)
                e.NegativeValue = null;
            else
                e.NegativeValue -= 1;
        }
    }

    private async Task OnValidSubmit()
    {
        try
        {
            IsSaving = true;
            EditingItem = await GameApiClient.Save(EditingItem);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            errors.Add(e.Data.Contains("error") ? e.Data["error"] as string : "Произошла ошибка, попробуйте позже");
        }
        finally
        {
            IsSaving = false;
        }
    }

    private async Task GoBack()
    {
        await JsRuntime.InvokeVoidAsync("history.back");
    }

}