@page "/games/edit/{id:int?}"
@using KickStat.Models.Games;
@using KickStat.Models.Players;
@attribute [Authorize]
@inject KickStatGamesApiClient GameApiClient;
@inject NavigationManager NavigationManager;
@inject KickStatPlayersApiClient PlayersApiClient
@inject IJSRuntime JsRuntime

<MudCard Class="mt-8">
    <EditForm Model="@EditingItem" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudCardContent>

            <MudGrid Justify="Justify.Center">

                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="EditingItem.PlayerId" T="int?" Label="Игрок" For="() => EditingItem.PlayerId" Placeholder="Выберите игрока" Dense>
                        @foreach (var player in Players)
                        {
                            <MudSelectItem T="int?" Value="@player.Id">@player.FullName</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="EditingItem.OpposingTeam" For="() => EditingItem.OpposingTeam" Label="Соперник" Dense />
                </MudItem>

                <MudItem xs="6">
                    <MudTextField @bind-Value="EditingItem.Date" T="DateTime?" Format="yyyy-MM-dd" For="() => EditingItem.Date" Label="Дата" InputType="InputType.Date" Dense />
                </MudItem>
                <MudItem xs="6">
                    <MudTextField @bind-Value="EditingItem.MatchDuration" For="() => EditingItem.MatchDuration" Label="Длительность матча" InputType="InputType.Number" Dense />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="EditingItem.Competition" Label="Соревнование" Dense />
                </MudItem>
            </MudGrid>
        </MudCardContent>


        @if (errors.Any())
        {
            <MudCardContent>
                @foreach (var error in errors)
                {
                    <MudText Color="@Color.Error">
                        @error
                    </MudText>
                }
            </MudCardContent>
        }


        <MudCardActions>
            <MudHidden Breakpoint="Breakpoint.SmAndDown">
                <MudSpacer />
                <MudButton OnClick="GoBack" Color="Color.Secondary">Отменить</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Disabled="@(IsSaving || IsLoading)" Color="Color.Primary">
                    @if (IsSaving)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    }
                    else
                    {
                        <MudText>Сохранить</MudText>
                    }
                </MudButton>
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.MdAndUp">
                <MudButton OnClick="GoBack" Color="Color.Secondary" FullWidth="true">Отменить</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Disabled="@(IsSaving || IsLoading)" FullWidth="true" Color="Color.Primary">
                    @if (IsSaving)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    }
                    else
                    {
                        <MudText>Сохранить</MudText>
                    }
                </MudButton>
            </MudHidden>
        </MudCardActions>
    </EditForm>
</MudCard>

@code {
    [Parameter]
    public int? Id { get; set; }

    private bool IsLoading = false;

    private bool IsSaving = false;

    private GameModel EditingItem = new();
    private List<PlayerModel> Players = new();
    List<string?> errors = new();

    protected override async Task OnInitializedAsync()
    {

        try
        {

            var response = await PlayersApiClient.List(
                new PlayerListRequest
                    {
                        Sort = new PlayerSortModel { IsAscending = true, OrderBy = PlayerSortOptions.FullName },
                        Filter = new PlayerFilterModel { Take = 100 }
                    });

            Players = response.Result?.ToList() ?? new List<PlayerModel>();

            if (Id is null or <= 1)
                return;

            IsLoading = true;
            EditingItem = await GameApiClient.Get(Id.Value);
        }
        catch (Exception e)
        {
            errors.Add(e.Data.Contains("error") ? e.Data["error"] as string : "Произошла ошибка, попробуйте позже");
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task OnValidSubmit()
    {
        try
        {
            IsSaving = true;
            EditingItem = await GameApiClient.Save(EditingItem);
            NavigationManager.NavigateTo("/players");
        }
        catch (Exception e)
        {
            errors.Add(e.Data.Contains("error") ? e.Data["error"] as string : "Произошла ошибка, попробуйте позже");
        }
        finally
        {
            IsSaving = false;
        }

    }

    private async Task GoBack()
    {
        await JsRuntime.InvokeVoidAsync("history.back");
    }

}
