<?xml version="1.0" encoding="utf-8"?>

<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      internalLogLevel="Info"
      internalLogFile="logs/internal-nlog.txt">

    <!-- enable asp.net core layout renderers -->
    <extensions>
        <add assembly="NLog.Web.AspNetCore" />
    </extensions>


    <!-- the targets to write to -->
    <targets>

        <!-- Logs for program startup events -->
        <target name="bootstrapLog" xsi:type="File" fileName="${basedir}/logs/program-${shortdate}.log"
                header="Date|EventId|Log level|Logger name|Message|Exception ${newline}----------------------------------------------------${newline}"
                layout="${longdate}|${event-properties:item=EventId_Id}|${uppercase:${level}}|${message}|${exception}" />

        <!-- Job logs -->
        <target name="jobLog" xsi:type="File" fileName="${basedir}/logs/jobs-${shortdate}.log"
                layout="${longdate}|${event-properties:item=EventId_Id}|${uppercase:${level}}|${logger}|${message}|${exception:format=tostring}${newline}" />

        <!-- Logs of web application -->
        <target name="webLog" xsi:type="File" fileName="${basedir}/logs/web/${lowercase:${level}}-${shortdate}.log"
                header="Date|EventId|Logger name|URL|Controller->Action|Message|Exception ${newline}-------------------------------------------------------------------${newline}"
                layout="${longdate}|${event-properties:item=EventId_Id}|${logger}|url: ${aspnet-request-url}|controller-action: ${aspnet-mvc-controller}->${aspnet-mvc-action}|${message}|${exception:format=tostring}${newline}" />

        <target name="sqlLog" xsi:type="File" fileName="${basedir}/logs/sql/${lowercase:${level}}-${shortdate}.log"
                header="Date|EventId|Logger name|URL|Controller->Action|Message|Exception ${newline}-------------------------------------------------------------------${newline}"
                layout="${longdate}|${event-properties:item=EventId_Id}|${logger}|url: ${aspnet-request-url}|controller-action: ${aspnet-mvc-controller}->${aspnet-mvc-action}|${message}|${exception:format=tostring}${newline}" />

        <target name="consoleLog" xsi:type="ColoredConsole" />

        <!--Console Target for hosting lifetime messages to improve Docker / Visual Studio startup detection -->
        <target name="lifetimeConsole" xsi:type="Console" layout="${MicrosoftConsoleLayout}" />

        <target name="spaConsoleLog" xsi:type="BufferingWrapper" bufferSize="50" flushTimeout="500" slidingTimeout="true">
            <target xsi:type="Console" writeBuffer="true" layout="${MicrosoftConsoleLayout}" />
        </target>


        <!-- write to the void aka just remove -->
        <target name="blackhole" xsi:type="Null" />
    </targets>

    <!-- rules to map from logger name to target -->
    <rules>
        <logger name="FarPlan*" minlevel="Info" writeTo="consoleLog" />
        <logger name="FarPlan.UI.SiteApi.Program" writeTo="bootstrapLog" minlevel="Trace" final="true" />
        <logger name="FarPlan.UI.SiteApi.Jobs*" writeTo="jobLog" minlevel="Trace" final="true" />
        <logger name="FarPlan*" writeTo="webLog" minlevel="Trace" />

        <logger name="Hangfire.*" writeTo="jobLog" final="true" />

        <logger name="Microsoft.AspNetCore.SpaServices" writeTo="spaConsoleLog" minlevel="Info" final="true" />
        <logger name="Microsoft.EntityFrameworkCore*" writeTo="sqlLog" minlevel="Trace" final="true" />
        <logger name="Microsoft.Hosting.Lifetime" writeTo="lifetimeConsole" minlevel="Info" final="true" />

        <!--Skip Microsoft logs and so log only own logs-->
        <logger name="Microsoft.*" writeTo="blackhole" minlevel="Trace" final="true" />
    </rules>
</nlog>